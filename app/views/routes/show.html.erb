<h1><%= @route.name %></h1>

<!-- markers => {data: @json, options: {draggable: true} } -->
<div class="row">
  <div class="span13">
    <h2>Map:</h2>
  </div>
  <div class="span3">
    <h2>Details:</h2>
  </div>
</div>
<div class="row">
  <div class="span13">
    <div id="map" style="width: 100%; height: 500px;"></div>
    <div id="chart_div"></div>
  </div>
  <div class="span3">
    <dl>
      <dt>Distance:</dt>
      <dd id="distance"></dd>
      <dt>Locations count:</dt>
      <dd id="locations"></dd>
    </dl>
  </div>
</div>

<%= link_to 'Edit', edit_route_path(@route) %> |
<%= link_to 'Back', routes_path %>

<script type="text/javascript">


  //google.load("visualization", "1", {packages: ["columnchart","corechart"]});
  //google.setOnLoadCallback(initVisualization);

  var SAMPLES = 64;
  var map;
  var elevationService;
  var chart;

  var path = null;
  var poland = new google.maps.LatLng(54.381579,18.596039);
  var waypoints = <%= @route.locations.to_json.html_safe %>;


  var markers = [];
function initVisualization(){


}
$(function(){

  var mapOptions = {
    zoom: 100,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
    center: poland,
    streetViewControl: false,
    draggableCursor: 'pointer'
  };
  map = new google.maps.Map(document.getElementById("map"), mapOptions);
  chart = new google.visualization.LineChart(document.getElementById('chart_div'));
  elevationService = new google.maps.ElevationService();

  google.maps.event.addListener(map, 'rightclick', function(e) {
     addMarker(e.latLng);
     saveRoute();
  });
  // zaznacz na mapie punkty wczytane z bazy
  $.each(waypoints,function(index,waypoint){
    waypoint = waypoint.split(',');
    addMarker(new google.maps.LatLng(waypoint[0],waypoint[1]));
  });
  drawPath();
  getElevation();
});
  /*
  function calcRoute(points) {
    var temp = points.slice();
    var request = {
      origin:  points[points.length-1].location,
      optimizeWaypoints: true,
      unitSystem: google.maps.UnitSystem.METRIC,
      destination: points[0].location,
      waypoints: temp.splice(1,temp.length-2),
      travelMode: google.maps.DirectionsTravelMode.WALKING
    };
    console.log("start: " + request.origin + " end: " + request.destination + " waypoints: " + request.waypoints[0].location);
    directionsService.route(request, function(response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
      }
    });
  }
    */
  function addMarker(pos,desc){
    var marker = new google.maps.Marker({
        position: pos,
        draggable: true,
        map: map
    });
    google.maps.event.addListener(marker, 'dblclick', function(e) {
      marker.setMap(null);
      var index = $.inArray(marker,markers);
      if (index > -1)
        markers.splice(index,1);
      drawPath();
      saveRoute();
    });
    google.maps.event.addListener(marker, 'drag', function(e) {
      drawPath();
    });
    google.maps.event.addListener(marker, 'dragend', function(e) {
      saveRoute();
    });
    markers.push(marker);

    drawPath();
    printLocations();
  }
  function clearPath() {
    if (path)
      path.setMap(null);
  }
  function drawPath(){
    clearPath();


    var line = [];
    $.each(markers,function(index,marker){
      line.push(marker.position);
    });
    path = new google.maps.Polyline({
      path: line,
      strokeColor: "#FF0000",
      strokeOpacity: 1.0,
      strokeWeight: 2
    });
    path.setMap(map);
    $('#distance').text((path.Distance()/1000).toFixed(2)+" km");
    $('#locations').text(markers.length);

  }

  function printLocations(){
    var debug = $('#debug');
    debug.text('');
    $.each(markers,function(index,marker){
      debug.append($("<li/>").text(marker.position.toString()));
    });
  }

  function saveRoute(){
    var data = {route: {locations: []}};
    $.each(markers,function(index,marker){
      data["route"]["locations"].push(marker.position.lat()+","+marker.position.lng());
    });
    $.ajax({
      url: '<%= route_path(@route, :json) %>',
      type: 'PUT',
      data: data
    });
  }

  function getElevation(){
      var line = [];
      $.each(markers,function(index,marker){
        line.push(marker.getPosition());
      });
      if (line.length == 0)
        return false;
      elevationService.getElevationAlongPath({
        path: line,
        samples: SAMPLES
      }, plotElevation);
    }
  function plotElevation(results){
    if (results == null)
      return;
    var data = new google.visualization.DataTable();
    data.addColumn('string', 'Sample');
    data.addColumn('number', 'Elevation');
    for (var i = 0; i < results.length; i++) {
      data.addRow(['', results[i].elevation]);
    }

    chart.draw(data, {
      width: "100%",
      height: 200,
      legend: 'none',
      titleY: 'Elevation (m)',
      focusBorderColor: '#00ff00'
    });

    }

</script>