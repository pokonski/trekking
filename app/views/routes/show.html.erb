<h1><%= @route.name %></h1>

<!-- markers => {data: @json, options: {draggable: true} } -->
<div class="row">
  <div class="span13">
    <ul class="tabs" data-tabs="true">
      <li class="active"><a href="#tab-map">Map</a></li>
      <li><a href="#tab-elevation">Elevation chart</a></li>
    </ul>
  </div>
  <div class="span3">
    <h2>Details:</h2>
  </div>
</div>
<div class="row">
  <div class="span13 tab-content">
    <div id="tab-map" class="active">
      <p>
        <span class="label notice">Instructions</span> Right click on the map to place a waypoint, double click on the waypoint to remove it. Click and drag to move.
      </p>
      <div id="map" style="width: 760px; height: 500px;"></div>
    </div>
    <div id="tab-elevation">
      <div id="chart_div"></div>
    </div>
  </div>
  <div class="span3">
    <dl>
      <dt>Distance:</dt>
      <dd id="distance"></dd>
      <dt>Locations count:</dt>
      <dd id="locations"></dd>
    </dl>
  </div>
</div>

<%= link_to 'Edit', edit_route_path(@route) %> |
<%= link_to 'Back', routes_path %>

<script type="text/javascript">


  //google.load("visualization", "1", {packages: ["columnchart","corechart"]});
  //google.setOnLoadCallback(initVisualization);

  var SAMPLES = 64;
  var map;
  var elevationService;
  var chart;

  var path = null;
  var poland = new google.maps.LatLng(54.381579,18.596039);
  var waypoints = <%= @route.waypoints.collect{|w| w.location.reverse.join(',')}.to_json.html_safe %>;


  var markers = [];
function initVisualization(){


}
$(function(){
  var centerAt = poland;
  var mapOptions = {
    zoom: 10,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
    center: poland,
    streetViewControl: false,
    draggableCursor: 'pointer'
  };
  map = new google.maps.Map(document.getElementById("map"), mapOptions);
  chart = new google.visualization.LineChart(document.getElementById('chart_div'));
  elevationService = new google.maps.ElevationService();


  google.maps.event.addListener(map, 'rightclick', function(e) {
     addMarker(e.latLng,true);
     saveRoute();
  });
  // zaznacz na mapie punkty wczytane z bazy
  $.each(waypoints,function(index,waypoint){
    waypoint = waypoint.split(',');
    addMarker(new google.maps.LatLng(waypoint[0],waypoint[1]));
  });

  if (waypoints.length > 0)
    map.fitBounds(constructBounds());


  drawPath();
  getElevation();
});
  function addMarker(pos,save){
    var marker = new google.maps.Marker({
        position: pos,
        draggable: true,
        map: map
    });
    google.maps.event.addListener(marker, 'dblclick', function(e) {
      marker.setMap(null);
      var index = $.inArray(marker,markers);
      if (index > -1)
        markers.splice(index,1);
      drawPath();
      getElevation();
      setIcons();
      saveRoute();
    });
    google.maps.event.addListener(marker, 'drag', function(e) {
      drawPath();
      getElevation();
    });
    google.maps.event.addListener(marker, 'dragend', function(e) {
      setIcons();
      saveRoute();

    });
    markers.push(marker);
    setIcons();
    drawPath();
    printLocations();
  }

  function setIcons(){
    var start_icon = "<%= image_path 'start.png' %>",
        finish_icon = "<%= image_path 'finish.png' %>",
        waypoint_icon = "<%= image_path 'hiking.png' %>";

    markers[0].setIcon(start_icon);
    for(var i=1; i < markers.length-1; i++)
      markers[i].setIcon(waypoint_icon);
    markers[markers.length-1].setIcon(finish_icon);
  }
  function clearPath() {
    if (path)
      path.setMap(null);
  }
  function drawPath(){
    clearPath();


    var line = [];
    $.each(markers,function(index,marker){
      line.push(marker.position);
    });
    path = new google.maps.Polyline({
      path: line,
      strokeColor: "#FF0000",
      strokeOpacity: 1.0,
      strokeWeight: 2
    });
    path.setMap(map);
    $('#distance').text((path.Distance()/1000).toFixed(2)+" km");
    $('#locations').text(markers.length);

  }

  function printLocations(){
    var debug = $('#debug');
    debug.text('');
    $.each(markers,function(index,marker){
      debug.append($("<li/>").text(marker.position.toString()));
    });
  }

  function saveRoute(){
    var data = {route: {waypoints: []}};
    $.each(markers,function(index,marker){
      data["route"]["waypoints"].push({location: [marker.position.lng(),marker.position.lat()]});
    });
    $.ajax({
      url: '<%= update_waypoints_route_path(@route, :json) %>',
      type: 'PUT',
      data: data
    });
  }

  function getElevation(){
      var line = [];
      $.each(markers,function(index,marker){
        line.push(marker.getPosition());
      });
      if (line.length == 0)
        return false;
      elevationService.getElevationAlongPath({
        path: line,
        samples: SAMPLES
      }, plotElevation);
    }
  function plotElevation(results){
    if (results == null)
      return;
    var data = new google.visualization.DataTable();
    data.addColumn('string', 'Sample');
    data.addColumn('number', 'Elevation');
    for (var i = 0; i < results.length; i++) {
      data.addRow(['', results[i].elevation]);
    }

    chart.draw(data, {
      width: 760,
      height: 200,
      legend: 'none',
      titleY: 'Elevation (m)',
      focusBorderColor: '#00ff00'
    });

    }

  function constructBounds(){
    if (markers.length == 0)
      return;

    var m = markers[0].getPosition();
        min_lat = m.lat(),
        max_lat = m.lat(),
        min_lng = m.lng(),
        max_lng = m.lng();
     $.each(markers,function(index,marker){
       var lat = marker.getPosition().lat(),
           lng = marker.getPosition().lng();
       if (lat < min_lat)
        min_lat = lat;
       if (lat > max_lat)
        max_lat = lat;
       if (lng < min_lng)
        min_lng = lng;
       if (lng > max_lng)
        max_lng = lng;
     });

    return new google.maps.LatLngBounds(new google.maps.LatLng(min_lat,min_lng), new google.maps.LatLng(max_lat,max_lng) );
  }

</script>